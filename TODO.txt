
----
Progress:

- implement a very basic secret sharing protocol
- Create a unit test with a checker for the final state of the simulation:
    - all injected transactions were included, and there are no duplicates
    - the state in each rollup matches the transactions. (deposits + L1)
    - L1 height, L2 height, how many reorgs, etc - if the efficiency is below a threashold then something could have happened

--------
Todo:

Complex:
T1: Bring in the core ethereum structures (see first task from route to testnet), and connect Obscuro to a real L1 node
T2: Introduce basic crypto for L2 transactions
T3: Introduce better mempool logic.
T4: Refactor the Obscuro "database" and introduce something proper that works within an enclave
T5: Create better logic to get L2 node up to speed (Depends on T1)
T6: replace the state and transaction execution with code from geth ( Depends on T2, T5)
    (super complex task)
T7: Refactoring create a Blockchain structure (see geth)- to better encapsulate the logic
T8: Implement the obscuro cryptography: (depends on T4)
    - from the master seed derive the keys
    - create the transaction block

Normal:
- update the readme
- make publishing to L1 more random (to simulate aggregators failing to publish)
- use "gauge" instead of stats
- introduce event feeds
- collect statistics when multiple rollups compete ( do see what actually happens)
- When verifying a rollup - check that the withdrawals in the header match the withdrawals as calculated


Future:
- analyse the POBI round - some inefficient state recalculation for the rollups
